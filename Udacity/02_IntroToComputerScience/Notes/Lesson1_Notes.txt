****************************Lesson 1 ****************************

****Printing****
print(3)
print(1+1)

****Python Grammar for Arithmetic Expressions****
Expression  ->  Expression Operator Expression
Expression  ->  Number
Operator    ->  +       - Terminal
Operator    ->  *       - Terminal
Number      ->  0,1,    - Terminal
Expression  -> (Expression)

# Sample 1
       Expression
       |
Expression    Operator    Expression
    |                 |                 |
Number             +            Number
    |                                   |
    1                                   1
    
# Sample 2
       Expression
       |
Expression             Operator            Expression
       |                       |                        |
Exp  Op   Exp              +                    Number
  |    |     |                                         |
  N    *  Exp Op Exp                              1
  |         .......
  2         3   +   3
  
****Variables****
Name = Expression
speed_of_light = 299792458
= means assignments

****Strings****
Can use single quote or double quotes
    - print('Hello')
    - print("Hello")
    
Can use '+' with Strings
<String> + <String> -> Concatenation of the two strings
print("Hello " + "World!")  

#String and numbers
print "!" * 12

#Indexing Strings
<String> [<expression>] -> One-character string
                Number
'udacity'[0] -> 'u'
'0123456'

'udacity'[1+1] -> 'a''
udacity'[-1] -> 'y'

****Selecting Sub-Sequences ****
    S           START           STOP
<String> [<expression>:<expression] -> String that is a subsequence of the characters in S 
                                                      starting from position START, and ending with position STOP-1

****Find Strings in Strings****
<string>.find(<string>)                    -> Number that gives first position in search string where the target string appears   
                                                      If the target string is not found, output is -1

<string>.find(<string>,<number>)      -> Number that gives first position in search string where the target string appears   
                                                       [at or after <number>]. If the target string is not found, output is -1

****Hints****
#Rounding numbers
str(<Number>) -> String
str(89) -> '89'

#Length of a string
len(string)
string_length = len(name)

#Read a string backwards
string[::-1] - where the "-1" means one step back.